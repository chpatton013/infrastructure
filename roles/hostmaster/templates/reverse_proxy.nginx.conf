# Run as less-privileged user.
user nginx;

# Run in the foreground as the primary process in this docker container.
daemon off;

# Max number of clients is calculated as:
#   worker_processes * worker_connections

# Use as many processes as we have CPU cores.
worker_processes auto;

# Maximum number of open files per process should be slightly greater than
# worker_connections.
worker_rlimit_nofile 1024;

events {
  worker_connections 1000;
}

pid /run/nginx.pid;

error_log /var/log/nginx/error.log notice;

# Load dynamic modules.
include /usr/share/nginx/modules/*.conf;

http {
  # Hide nginx version information.
  server_tokens off;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;

  # Use sendfile() instead of read()/write().
  sendfile on;

  # Do not send partial frames.
  tcp_nopush on;

  # Reduce maximum time worker connections are tied up for. (Default: 65)
  keepalive_timeout 30;

  # Increase capacity of type hash table.
  types_hash_max_size 2048;
  types_hash_bucket_size 64;

  # Enable compression.
  gzip on;

  # Between 1-9. 5 provides ~75% reduction of most ASCII content. This is almost
  # as good as 9, but with significantly less CPU usage.
  gzip_comp_level 5;

  # Do not compress small payloads that are unlikely to shink any more.
  # (Default: 20)
  gzip_min_length 256;

  # Compress data for hosts connecting through proxies (using the "Via" header).
  gzip_proxied any;

  # Tell proxies to cache both the compressed and uncompressed version of
  # resources whenever the client's "Accept-Encoding" header varies.
  gzip_vary on;

  # Compress ASCII mime types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/svg+xml
    image/x-icon
    text/css
    text/html
    text/plain
    text/x-component;

  # Redirect http://www.* and http://* to https://localhost.
  server {
    listen [::]:80;
    listen 80;

    server_name ~^(www\.)?(?<domain>.+)$;

    include ssl.conf;

    return 301 https://$domain$request_uri;
  }

  # Redirect https://www.* to https://localhost.
  server {
    listen [::]:443 ssl spdy;
    listen 443 ssl spdy;

    server_name ~^www\.(?<domain>.+)$;

    include ssl.conf;

    return 301 https://$domain$request_uri;
  }

  # Pass https://* to http://poweradmin.
  server {
    listen [::]:443 ssl spdy;
    listen 443 ssl spdy;

    server_name ~.+$;

    include ssl.conf;

    location / {
      proxy_pass http://poweradmin:80;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $remote_addr;
    }
  }
}
